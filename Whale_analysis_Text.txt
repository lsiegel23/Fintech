# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
from IPython import get_ipython

# %% [markdown]
#  #  A Whale off the Port(folio)
# 
#  In this assignment, you'll get to use what you've learned this week to evaluate the performance among various algorithmic, hedge, and mutual fund portfolios and compare them against the S&P 500.

# %%
import pandas as pd
import numpy as np
import datetime as dt
from pathlib import Path
get_ipython().run_line_magic('matplotlib', 'inline')

# %% [markdown]
# # Data Cleaning
# 
# In this section, you will need to read the CSV files into DataFrames and perform any necessary data cleaning steps. After cleaning, combine all DataFrames into a single DataFrame.
# 
# Files:
# 1. whale_returns.csv
# 2. algo_returns.csv
# 3. sp500_history.csv
# %% [markdown]
# ## Whale Returns
# 
# Read the Whale Portfolio daily returns and clean the data

# %%
# Reading whale returns
whale_returns_csv = Path("Resources/whale_returns.csv")
whale_pd = pd.read_csv(whale_returns_csv, index_col="Date")


# YOUR CODE HERE
pd.read_csv(whale_returns_csv)
whale_pd.head()


# %%
# Count nulls
whale_pd.shape
whale_pd.isnull().sum()


# %%
# Drop nulls
#csv_data = csv_data.fillna("Unknown")
whale_pd.dropna(inplace=True)
whale_pd.isnull().sum()


# %%
whale_pd.head()

# %% [markdown]
# ## Algorithmic Daily Returns
# 
# Read the algorithmic daily returns and clean the data

# %%
# Reading algorithmic returns
algo_returns_csv = Path("Resources/algo_returns.csv")
# YOUR CODE HERE
algo_pd = pd.read_csv(algo_returns_csv, index_col="Date")
algo_pd.head()


# %%
# Count nulls
algo_pd.isnull().sum()


# %%
# Drop nulls
algo_pd = algo_pd.dropna().copy()
algo_pd.isnull().sum()
algo_pd
#HELP

# %% [markdown]
# ## S&P 500 Returns
# 
# Read the S&P500 Historic Closing Prices and create a new daily returns DataFrame from the data. 

# %%
# Reading S&P 500 Closing Prices
sp500_history_csv = Path("Resources/sp500_history.csv")
sp500_pd = pd.read_csv(sp500_history_csv, index_col="Date")
sp500_pd.head()


# %%
# Check Data Types
sp500_pd.dtypes
#sp500_pd.head()


# %%
# Fix Data Types
sp500_pd["Close"] = sp500_pd["Close"].str.replace('$','')
sp500_pd.head()


# %%
sp500_pd["Close"] = sp500_pd["Close"].astype('float64')
sp500_pd.info()
sp500_pd["Close"] = sp500_pd["Close"].pct_change()
sp500_pd.head()


# %%
# Calculate Daily Returns 

sp500_pd = sp500_pd.astype('float64')
sp500_pd.info()
sp500_pd = sp500_pd.pct_change()
sp500_pd.head()


# %%
# Drop nulls
# YOUR CODE HERE
sp500_pd.dropna(inplace=True)
sp500_pd.isnull().sum()


# %%
# Rename Column
# YOUR CODE HERE
sp500_pd.columns = ["S&P 500"]
sp500_pd.head()

# %% [markdown]
# ## Combine Whale, Algorithmic, and S&P 500 Returns

# %%
# Concatenate all DataFrames into a single DataFrame
all_returns = pd.concat([whale_pd , sp500_pd , algo_pd])
all_returns.head()


# %% [markdown]
# ---
# %% [markdown]
# # Portfolio Analysis
# 
# In this section, you will calculate and visualize performance and risk metrics for the portfolios.
# %% [markdown]
# ## Performance
# 
# Calculate and Plot the daily returns and cumulative returns. Does any portfolio outperform the S&P 500? 

# %%
# Plot daily returns
# YOUR CODE HERE
all_returns.plot(figsize=(15,8))
#HELP


# %%
# Plot cumulative returns
cumulative_returns = (1+all_returns).cumprod() -1
cumulative_returns.plot(figsize=(15,8))
#HELP

# %% [markdown]
# ## Risk
# 
# Determine the _risk_ of each portfolio:
# 
# 1. Create a box plot for each portfolio. 
# 2. Calculate the standard deviation for all portfolios
# 4. Determine which portfolios are riskier than the S&P 500
# 5. Calculate the Annualized Standard Deviation

# %%
#HELP
# Box plot to visually show risk
cum_returns_by_year = all_returns.groupby(all_returns.index.year).apply(lambda x: (1+x).cumprod() -1)
annual_returns_by_year = cum_returns_by_year.groupby(cum_returns_by_year.index.year).last()
annual_returns_by_year.head()


# %%
# Daily Standard Deviations
# Calculate the standard deviation for each portfolio. 
# Which portfolios are riskier than the S&P 500?
# YOUR CODE HERE


# %%
# Determine which portfolios are riskier than the S&P 500
# YOUR CODE HERE


# %%
# Calculate the annualized standard deviation (252 trading days)
# YOUR CODE HERE

# %% [markdown]
# ---
# %% [markdown]
# ## Rolling Statistics
# 
# Risk changes over time. Analyze the rolling statistics for Risk and Beta. 
# 
# 1. Plot the rolling standard deviation of the various portfolios along with the rolling standard deviation of the S&P 500 (consider a 21 day window). Does the risk increase for each of the portfolios at the same time risk increases in the S&P?
# 2. Construct a correlation table for the algorithmic, whale, and S&P 500 returns. Which returns most closely mimic the S&P?
# 3. Choose one portfolio and plot a rolling beta between that portfolio's returns and S&P 500 returns. Does the portfolio seem sensitive to movements in the S&P 500?
# 4. An alternative way to calculate a rolling window is to take the exponentially weighted moving average. This is like a moving window average, but it assigns greater importance to more recent observations. Try calculating the ewm with a 21 day half-life.

# %%
#HELP
# Calculate and plot the rolling standard deviation for
# the S&P 500 and whale portfolios using a 21 trading day window
all_returns["S&P 500"].rolling(window=21).std().plot(figsize=(15,8))


# %%
# Construct a correlation table
# YOUR CODE HERE
#HELP


# %%
# Calculate Beta for a single portfolio compared to the total market (S&P 500)
# (Your graph may differ, dependent upon which portfolio you are comparing)
import seaborn as sns
correlation = all_returns.corr()
sns.heatmap(correlation, vmin=-1, vmax=1,annot=True,)
correlation
#HELP


# %%
# Calculate a rolling window using the exponentially weighted moving average. 
covariance = all_returns['BERKSHIRE HATHAWAY INC'].cov(all_returns['S&P 500'])
variance = all_returns['S&P 500'].var()
algo1_beta = covariance / variance
algo1_beta
#HELP

# %% [markdown]
# ---
# %% [markdown]
# ## Sharpe Ratios
# In reality, investment managers and thier institutional investors look at the ratio of return-to-risk, and not just returns alone. (After all, if you could invest in one of two portfolios, each offered the same 10% return, yet one offered lower risk, you'd take that one, right?)
# 
# 1. Using the daily returns, calculate and visualize the Sharpe ratios using a bar plot.
# 2. Determine whether the algorithmic strategies outperform both the market (S&P 500) and the whales portfolios.

# %%
# Calculate annualized Sharpe Ratios
sharpe_ratios = (all_returns.mean() * 252) / (all_returns.std() * np.sqrt(252))
sharpe_ratios.sort_values()
#HELP


# %%
# Visualize the sharpe ratios as a bar plot
sharpe_ratios.plot.bar()
#HELP

# %% [markdown]
# On the basis of this performance metric, do our algo strategies outperform both 'the market' and the whales? Type your answer here:
# %% [markdown]
# ---
# %% [markdown]
# # Portfolio Returns
# 
# In this section, you will build your own portfolio of stocks, calculate the returns, and compare the results to the Whale Portfolios and the S&P 500. 
# 
# 1. Visit [Google Sheets](https://docs.google.com/spreadsheets/) and use the in-built Google Finance function to choose 3-5 stocks for your own portfolio.
# 2. Download the data as CSV files and calculate the portfolio returns.
# 3. Calculate the returns for each stock.
# 4. Using those returns, calculate the weighted returns for your entire portfolio assuming an equal number of shares for each stock.
# 5. Add your portfolio returns to the DataFrame with the other portfolios and rerun the analysis. How does your portfolio fair?
# 
# 
# ## Your analysis should include the following:
# 
# - Using all portfolios:
#  - The annualized standard deviation (252 trading days) for all portfolios.
#  - The plotted rolling standard deviation using a 21 trading day window for all portfolios.
#  - The calculated annualized Sharpe Ratios and the accompanying bar plot visualization.
#  - A correlation table.
# - Using your custom portfolio and one other of your choosing:
#  - The plotted beta. 
# %% [markdown]
# ## Choose 3-5 custom stocks with at last 1 year's worth of historic prices and create a DataFrame of the closing prices and dates for each stock.

# %%
# Read the first stock
# YOUR CODE HERE


# %%
# Read the second stock
# YOUR CODE HERE


# %%
# Read the third stock
# YOUR CODE HERE


# %%
# Concatenate all stocks into a single DataFrame
tickers = ['aapl','cost','goog']
combined_df = None
for ticker in tickers:
    TICKER = ticker.upper()
    ticker_returns_csv = Path(f"./Resources/{ticker}_historical.csv")
    ticker_df = pd.read_csv(ticker_returns_csv,index_col="Trade DATE", parse_dates=True)
    ticker_df.index.names = ["Date"]
    ticker_df.sort_index(inplace=True)
    ticker_df.drop(columns=['Symbol'],inplace=True)
    ticker_df.columns = [TICKER]
    ticker_df[TICKER] = ticker_df[TICKER].astype('float64').pct_change()
    combined_df = pd.concat([combined_df,ticker_df], axis="columns", join="inner")
    
print(combined_df.head())
print(combined_df.tail())


# %%
# Reset the index
# YOUR CODE HERE


# %%
# Pivot so that each column of prices represents a unique symbol
# YOUR CODE HERE


# %%
# Drop Nulls
combined_df.dropna(inplace=True)

# %% [markdown]
# ## Calculate the weighted returns for the portfolio assuming an equal number of shares for each stock

# %%
# Calculate weighted portfolio returns
weights = [1/3, 1/3, 1/3]
weights = [1/3, 1/3, 1/3]
weighted_returns = combined_df.dot(weights)
weighted_returns.columns = ['Custom']
print(weighted_returns.columns)
print(weighted_returns.head())

# %% [markdown]
# ## Join your portfolio returns to the DataFrame that contains all of the portfolio returns

# %%
# Add your "Custom" portfolio to the larger dataframe of fund returns
new_combined_df = pd.concat([all_returns, weighted_returns])
#new_combined_df.rename(columns={0,"Custom"}, inplace=True)
new_combined_df.head()
#HELP


# %%
# Only compare dates where return data exists for all the stocks (drop NaNs)
new_combined_df.dropna(inplace=True)
new_combined_df.tail()
#HELP

# %% [markdown]
# ## Re-run the performance and risk analysis with your portfolio to see how it compares to the others

# %%
# Risk
new_risk = new_combined_df.std()
print(new_risk.sort_values())
#HELP


# %%
# Rolling
# YOUR CODE HERE


# %%
# Annualized Sharpe Ratios
# YOUR CODE HERE


# %%
# Visualize the sharpe ratios as a bar plot
# YOUR CODE HERE


# %%
# Create a correlation analysis
# YOUR CODE HERE


# %%
# Beta
# YOUR CODE HERE


